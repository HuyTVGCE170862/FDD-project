def confirm(question):
    """Prompts a given question and handles user input."""
    valid = {"yes": True, 'y': True, "ye": True,
             "no": False, 'n': False, '': True}
    prompt = " [Y/n] "

    while True:
        print(BOLD + CYAN + question + prompt + END)
        choice = input().lower()
        if choice in valid:
            return valid[choice]

        print("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")


def print_help():
    """Prints usage instructions."""
    print("%sRebound, V1.1.9a1 - Made by @shobrook%s\n" % (BOLD, END))
    print("Command-line tool that automatically searches Stack Overflow and displays results in your terminal when you get a compiler error.")
    print("\n\n%sUsage:%s $ rebound %s[file_name]%s\n" % (UNDERLINE, END, YELLOW, END))
    print("\n$ python3 %stest.py%s   =>   $ rebound %stest.py%s" % (YELLOW, END, YELLOW, END))
    print("\n$ node %stest.js%s     =>   $ rebound %stest.js%s\n" % (YELLOW, END, YELLOW, END))
    print("\nIf you just want to query Stack Overflow, use the -q parameter: $ rebound -q %sWhat is an array comprehension?%s\n\n" % (YELLOW, END))
def main():
    if len(sys.argv) == 1 or sys.argv[1].lower() == "-h" or sys.argv[1].lower() == "--help":
        print_help()
    elif sys.argv[1].lower() == "-q" or sys.argv[1].lower() == "--query":
        query = ' '.join(sys.argv[2:])
        search_results, captcha = search_stackoverflow(query)

        if search_results != []:
            if captcha:
                print("\n%s%s%s" % (RED, "Sorry, Stack Overflow blocked our request. Try again in a minute.\n", END))
                return
            else:
                App(search_results) # Opens interface
        else:
            print("\n%s%s%s" % (RED, "No Stack Overflow results found.\n", END))
    else:
        language = get_language(sys.argv[1].lower()) # Gets the language name
        if language == '': # Unknown language
            print("\n%s%s%s" % (RED, "Sorry, Rebound doesn't support this file type.\n", END))
            return

        file_path = sys.argv[1:]
        if language == 'java':
            file_path = [f.replace('.class', '') for f in file_path]
        output, error = execute([language] + file_path) # Compiles the file and pipes stdout
        if (output, error) == (None, None): # Invalid file
            return

        error_msg = get_error_message(error, language) # Prepares error message for search
        if error_msg != None:
            language = 'java' if language == 'javac' else language # Fix language compiler command
            query = "%s %s" % (language, error_msg)
            search_results, captcha = search_stackoverflow(query)

            if search_results != []:
                if captcha:
                    print("\n%s%s%s" % (RED, "Sorry, Stack Overflow blocked our request. Try again in a minute.\n", END))
                    return
                elif confirm("\nDisplay Stack Overflow results?"):
                    App(search_results) # Opens interface
            else:
                print("\n%s%s%s" % (RED, "No Stack Overflow results found.\n", END))
        else:
            print("\n%s%s%s" % (CYAN, "No error detected :)\n", END))

    return